{"version":3,"sources":["../src/login.js"],"names":["configFile","path","join","process","cwd","loginFile","schema","properties","key","description","message","required","secret","execute","context","validateConfig","prompt","override","argv","delimiter","start","then","content","done","config","fs","readFileSync","e","console","log","exit","err"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;AAEA,MAAMA,UAAU,GAAGC,cAAKC,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,kBAAzB,CAAnB;;AACA,MAAMC,SAAS,GAAGJ,cAAKC,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,YAAzB,CAAlB;;AAEA,MAAME,MAAM,GAAG;AACbC,EAAAA,UAAU,EAAE;AACVC,IAAAA,GAAG,EAAE;AACHC,MAAAA,WAAW,EAAE,sBADV;AAEHC,MAAAA,OAAO,EAAE,8CAFN;AAGHC,MAAAA,QAAQ,EAAE;AAHP,KADK;AAMVC,IAAAA,MAAM,EAAE;AACNH,MAAAA,WAAW,EAAE,0BADP;AAENC,MAAAA,OAAO,EAAE,2CAFH;AAGNC,MAAAA,QAAQ,EAAE;AAHJ;AANE;AADC,CAAf;;AAeO,SAASE,OAAT,CAAiBC,OAAjB,EAA0B;AAC/BC,EAAAA,cAAc;AAEdC,kBAAOC,QAAP,GAAkBH,OAAO,CAACI,IAA1B;AACAF,kBAAON,OAAP,GAAiB,gBAAjB;AACAM,kBAAOG,SAAP,GAAmB,IAAnB;;AACAH,kBAAOI,KAAP;;AAEA,uBAASJ,eAAT,EAAiBV,MAAjB,EACGe,IADH,CACQC,OAAO,IAAI,sBAAUjB,SAAV,EAAqBiB,OAArB,CADnB,EAEGD,IAFH,CAEQE,IAFR;AAGD;;AAED,SAASR,cAAT,GAA0B;AACxB,MAAIS,MAAJ;;AAEA,MAAI;AACFA,IAAAA,MAAM,GAAGC,YAAGC,YAAH,CAAgB1B,UAAhB,EAA4B,MAA5B,CAAT;AACD,GAFD,CAEE,OAAM2B,CAAN,EAAS;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAY,8DAAZ;AACA1B,IAAAA,OAAO,CAAC2B,IAAR,CAAa,CAAb;AACD;;AAED,MAAI,CAACN,MAAL,EAAa;AACXI,IAAAA,OAAO,CAACC,GAAR,CAAY,4EAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,yEAAZ;AACA1B,IAAAA,OAAO,CAAC2B,IAAR,CAAa,CAAb,EAHW,CAGM;AAClB;AACF;;AAED,SAASP,IAAT,CAAcQ,GAAd,EAAmB;AACjB,MAAIA,GAAJ,EAAS;AACP,WAAOH,OAAO,CAACC,GAAR,CAAYE,GAAZ,CAAP;AACD;;AAEDH,EAAAA,OAAO,CAACC,GAAR,CAAY,wDAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACD","sourcesContent":["import path from 'path';\nimport prompt from 'prompt';\nimport fs from 'fs';\n\nimport { getInput, writeFile } from './utils';\n\nconst configFile = path.join(process.cwd(), 'cordova-hcp.json');\nconst loginFile = path.join(process.cwd(), '.chcplogin');\n\nconst schema = {\n  properties: {\n    key: {\n      description: 'Amazon Access Key Id',\n      message: 'You need to provide the Amazon Access Key Id',\n      required: true,\n    },\n    secret: {\n      description: 'Amazon Secret Access Key',\n      message: 'You need to provide the Secret Access Key',\n      required: true,\n    },\n  },\n};\n\nexport function execute(context) {\n  validateConfig();\n\n  prompt.override = context.argv;\n  prompt.message = 'Please provide';\n  prompt.delimiter = ': ';\n  prompt.start();\n\n  getInput(prompt, schema)\n    .then(content => writeFile(loginFile, content))\n    .then(done);\n}\n\nfunction validateConfig() {\n  let config;\n\n  try {\n    config = fs.readFileSync(configFile, 'utf8');\n  } catch(e) {\n    console.log('Cannot parse cordova-hcp.json. Did you run cordova-hcp init?');\n    process.exit(0);\n  }\n\n  if (!config) {\n    console.log('You need to run \"cordova-hcp init\" before you can run \"cordova-hcp login\".');\n    console.log('Both commands needs to be invoked in the root of the project directory.');\n    process.exit(0); // eslint-disable-line no-process-exit\n  }\n}\n\nfunction done(err) {\n  if (err) {\n    return console.log(err);\n  }\n\n  console.log('Project initialized and .chcindex.plogin file created.');\n  console.log('You SHOULD add .chcplogin to your .gitignore');\n  console.log('( echo \\'.chcplogin\\' >> .gitignore )');\n}\n"],"file":"login.js"}