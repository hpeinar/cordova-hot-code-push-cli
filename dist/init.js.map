{"version":3,"sources":["../src/init.js"],"names":["configFile","path","join","process","cwd","name","description","pattern","message","required","s3bucket","s3prefix","s3region","default","iosIdentifier","androidIdentifier","update","schema","properties","ios_identifier","android_identifier","urlSchema","content_url","execute","context","prompt","override","argv","delimiter","start","result","then","validateBucket","res","getUrl","url","_","assign","content","done","omit","region","bucket","getContentUrl","err","console","log"],"mappings":"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","sourcesContent":["import path from 'path';\nimport prompt from 'prompt';\nimport _ from 'lodash';\n\nimport { getInput, writeFile } from './utils.js';\n\nconst configFile = path.join(process.cwd(), 'cordova-hcp.json');\n\nconst name = {\n    description: 'Enter project name (required)',\n    pattern: /^[a-zA-Z\\-\\s0-9]+$/,\n    message: 'Name must be only letters, numbers, space or dashes',\n    required: true,\n};\n\nconst s3bucket = {\n    description: 'Amazon S3 Bucket name (required for cordova-hcp deploy)',\n    pattern: /^[a-zA-Z\\-0-9\\.]+$/,\n    message: 'Name must be only letters, numbers, or dashes',\n};\n\nconst s3prefix = {\n    description: 'Path in S3 bucket (optional for cordova-hcp deploy)',\n    pattern: /^[a-zA-Z\\-\\s0-9\\.\\/]+\\/$/,\n    message:\n        'Path must be only letters, numbers, spaces, forward slashes or dashes and must end with a forward slash',\n};\n\nconst s3region = {\n    description: 'Amazon S3 region (required for cordova-hcp deploy)',\n    pattern:\n        /^(us-east-1|us-west-2|us-west-1|eu-west-1|eu-central-1|ap-southeast-1|ap-southeast-2|ap-northeast-1|sa-east-1)$/,\n    default: 'us-east-1',\n    message:\n        'Must be one of: us-east-1, us-west-2, us-west-1, eu-west-1, eu-central-1, ap-southeast-1, ap-southeast-2, ap-northeast-1, sa-east-1',\n};\n\nconst iosIdentifier = {\n    description: 'IOS app identifier',\n    pattern: /^[a-zA-Z\\-0-9\\.]+$/,\n};\n\nconst androidIdentifier = {\n    description: 'Android app identifier',\n    pattern: /^[a-zA-Z\\-0-9\\.]+$/,\n};\n\nconst update = {\n    description: 'Update method (required)',\n    pattern: /(start|resume|now)/,\n    required: true,\n    message: 'Needs to be one of start, resume or now',\n    default: 'resume',\n};\n\nconst schema = {\n    properties: {\n        name,\n        s3bucket,\n        s3prefix,\n        s3region,\n        ios_identifier: iosIdentifier,\n        android_identifier: androidIdentifier,\n        update,\n    },\n};\n\nconst urlSchema = {\n    properties: {\n        content_url: {\n            description:\n                'Enter full URL to directory where cordova-hcp build result will be uploaded',\n            message: 'Must supply URL',\n            required: true,\n        },\n    },\n};\n\nexport function execute(context) {\n    prompt.override = context.argv;\n    prompt.message = 'Please provide';\n    prompt.delimiter = ': ';\n    prompt.start();\n\n    let result;\n\n    getInput(prompt, schema)\n        .then(validateBucket)\n        .then((res) => (result = res))\n        .then(getUrl)\n        .then((url) => _.assign(result, url))\n        .then((content) => writeFile(configFile, content))\n        .then(done);\n}\n\nfunction validateBucket(result) {\n    if (!result.s3bucket) {\n        return _.omit(result, ['s3region', 's3bucket', 's3prefix']);\n    }\n\n    return result;\n}\n\nfunction getUrl({ s3region: region, s3bucket: bucket, s3prefix: path }) {\n    if (!bucket) {\n        return getInput(prompt, urlSchema);\n    }\n\n    return { content_url: getContentUrl(region, bucket, path) };\n}\n\nfunction getContentUrl(region, bucket, path) {\n    let url =\n        region === 'us-east-1'\n            ? 's3.amazonaws.com'\n            : `s3-${region}.amazonaws.com`;\n    url = `https://${url}/${bucket}`;\n\n    if (path) {\n        url += `/${path}`;\n    }\n\n    return url;\n}\n\nfunction done(err) {\n    if (err) {\n        return console.log(err);\n    }\n    console.log('Project initialized and cordova-hcp.json file created.');\n    console.log(\n        'If you wish to exclude files from being published, specify them in .chcpignore'\n    );\n    console.log(\n        'Before you can push updates you need to run \"cordova-hcp login\" in project directory'\n    );\n}\n"],"file":"init.js"}