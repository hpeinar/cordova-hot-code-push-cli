{"version":3,"sources":["../src/build.js"],"names":["createHash","crypto","chcpContext","execute","context","config","prepareConfig","ignore","ignoredFiles","console","log","source","sourceDirectory","split","path","sep","join","posix","files","onlyFiles","hashQueue","prepareFilesHashQueue","manifestFile","manifestFilePath","fs","writeFileSync","JSON","stringify","err","argv","localdev","update","projectsConfigFilePath","release","queue","i","file","hidefile","isHiddenSync","push","fileHashSync","readFileSync","defaultConfig","parse","process","env","VERSION","calculateTimestamp","e","autogenerated","content_url","filePath","fileData","code","error","relative","replace","RegExp","hash","digest","hashFile","filename","callback","stream","createReadStream","on","data","result","currentdate","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds"],"mappings":"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","sourcesContent":["import path from 'path';\r\nimport prompt from 'prompt';\r\nimport fs from 'fs-extra';\r\nimport crypto from 'crypto';\r\nimport _ from 'lodash';\r\nimport { getAllFilesSync } from 'get-all-files';\r\nimport hidefile from 'hidefile';\r\nimport glob from 'fast-glob';\r\n\r\nconst createHash = crypto.createHash;\r\n\r\nlet chcpContext = null;\r\n\r\nexport async function execute(context) {\r\n    chcpContext = context;\r\n\r\n    let config = prepareConfig(context);\r\n    let ignore = context.ignoredFiles;\r\n\r\n    //let files = await getAllFilesSync(chcpContext.sourceDirectory).toArray();\r\n\r\n    console.log('ignore', ignore);\r\n    let source = chcpContext.sourceDirectory\r\n        .split(path.sep)\r\n        .join(path.posix.sep);\r\n    console.log('Source', source);\r\n    let files = await glob(`${source}/**/**`, {\r\n        onlyFiles: true,\r\n        ignore: ignore,\r\n    });\r\n\r\n    // Now remove the ignored files\r\n\r\n    console.log('After', files);\r\n\r\n    let hashQueue = prepareFilesHashQueue(files);\r\n\r\n    const manifestFile = chcpContext.manifestFilePath;\r\n    try {\r\n        fs.writeFileSync(manifestFile, JSON.stringify(hashQueue));\r\n        console.log('Hashqueue', hashQueue);\r\n    } catch (err) {\r\n        return console.log(err);\r\n    }\r\n\r\n    if (context.argv && context.argv.localdev) {\r\n        config.update = 'now';\r\n    }\r\n    try {\r\n        fs.writeFileSync(\r\n            chcpContext.projectsConfigFilePath,\r\n            JSON.stringify(config, null, 2)\r\n        );\r\n        console.log('Written to ' + chcpContext.projectsConfigFilePath);\r\n        console.log(\r\n            'Build ' +\r\n                config.release +\r\n                ' created in ' +\r\n                chcpContext.sourceDirectory\r\n        );\r\n    } catch (err) {\r\n        console.log(err);\r\n        throw err;\r\n    }\r\n    return config;\r\n}\r\n\r\nfunction prepareFilesHashQueue(files) {\r\n    var queue = [];\r\n    for (var i in files) {\r\n        var file = files[i];\r\n        if (!hidefile.isHiddenSync(file)) {\r\n            queue.push(fileHashSync(file));\r\n        }\r\n    }\r\n\r\n    return queue;\r\n}\r\n\r\nfunction prepareConfig(context) {\r\n    var config = {};\r\n\r\n    try {\r\n        config = fs.readFileSync(context.defaultConfig, 'utf8');\r\n        config = JSON.parse(config);\r\n        config.release = process.env.VERSION || calculateTimestamp();\r\n    } catch (e) {\r\n        config = {\r\n            autogenerated: true,\r\n            release: calculateTimestamp(),\r\n        };\r\n    }\r\n\r\n    if (context.argv && context.argv.content_url) {\r\n        config.content_url = context.argv.content_url;\r\n    }\r\n\r\n    return config;\r\n}\r\n\r\nfunction fileHashSync(filePath) {\r\n    var fileData;\r\n\r\n    try {\r\n        fileData = fs.readFileSync(filePath, 'utf8');\r\n    } catch (err) {\r\n        if (err.code === 'ENOENT')\r\n            return console.error('File does not exist. Error: ', err);\r\n\r\n        return console.error('Error: ', err);\r\n    }\r\n\r\n    //console.log('srouce', chcpContext.sourceDirectory);\r\n    let file = path\r\n        .relative(chcpContext.sourceDirectory, filePath)\r\n        .replace(new RegExp('\\\\\\\\', 'g'), '/');\r\n\r\n    return {\r\n        file: file,\r\n        hash: crypto.createHash('md5').update(fileData, 'utf8').digest('hex'),\r\n    };\r\n}\r\n\r\nfunction hashFile(filename, callback) {\r\n    var hash = crypto.createHash('md5');\r\n    const stream = fs.createReadStream(filename);\r\n\r\n    //stream.pipe(writeStream);\r\n    //console.log('Hashing: ', filename);\r\n    stream.on('data', function (data) {\r\n        hash.update(data, 'utf8');\r\n    });\r\n\r\n    stream.on('end', function () {\r\n        var result = hash.digest('hex'),\r\n            file = path\r\n                .relative(chcpContext.sourceDirectory, filename)\r\n                .replace(new RegExp('\\\\\\\\', 'g'), '/');\r\n\r\n        callback(null, {\r\n            file: file,\r\n            hash: result,\r\n        });\r\n    });\r\n}\r\n\r\nfunction calculateTimestamp() {\r\n    var currentdate = new Date();\r\n    return (\r\n        currentdate.getFullYear() +\r\n        '.' +\r\n        (currentdate.getMonth() + 1 < 10\r\n            ? '0' + (currentdate.getMonth() + 1)\r\n            : currentdate.getMonth() + 1) +\r\n        '.' +\r\n        (currentdate.getDate() < 10\r\n            ? '0' + currentdate.getDate()\r\n            : currentdate.getDate()) +\r\n        '-' +\r\n        (currentdate.getHours() < 10\r\n            ? '0' + currentdate.getHours()\r\n            : currentdate.getHours()) +\r\n        '.' +\r\n        (currentdate.getMinutes() < 10\r\n            ? '0' + currentdate.getMinutes()\r\n            : currentdate.getMinutes()) +\r\n        '.' +\r\n        (currentdate.getSeconds() < 10\r\n            ? '0' + currentdate.getSeconds()\r\n            : currentdate.getSeconds())\r\n    );\r\n}\r\n"],"file":"build.js"}