{"version":3,"sources":["../src/deploy.js"],"names":["module","exports","execute","context","deploy","err","config","ignore","ignoredFiles","fs","readFileSync","defaultConfig","JSON","parse","e","console","log","process","exit","filter","ignoredFile","match","map","rimraf","sync","ensureDir","copy","sourceDirectory","error","client","s3sync","region","s3region","TransferMonitor","monitor","on","progress","s3bucket","s3prefix","commandInput","ACL","del"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,CAAC,YAAY;AACTA,EAAAA,MAAM,CAACC,OAAP,GAAiB;AACbC,IAAAA,OAAO,EAAEA;AADI,GAAjB;;AAIA,iBAAeA,OAAf,CAAuBC,OAAvB,EAAgC;AAC5B,QAAI;AACA,YAAMC,MAAM,CAACD,OAAD,CAAZ;AACH,KAFD,CAEE,OAAOE,GAAP,EAAY;AACV,YAAMA,GAAN;AACH;AACJ;;AAED,iBAAeD,MAAf,CAAsBD,OAAtB,EAA+B;AAC3B,QAAIG,MAAJ;AACA,QAAIC,MAAM,GAAGJ,OAAO,CAACK,YAArB;;AAEA,QAAI;AACAF,MAAAA,MAAM,GAAGG,iBAAGC,YAAH,CAAgBP,OAAO,CAACQ,aAAxB,EAAuC,MAAvC,CAAT;AACAL,MAAAA,MAAM,GAAGM,IAAI,CAACC,KAAL,CAAWP,MAAX,CAAT;AACH,KAHD,CAGE,OAAOQ,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,GAAR,CACI,8DADJ;AAGAC,MAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACH;;AACD,QAAI,CAACZ,MAAL,EAAa;AACTS,MAAAA,OAAO,CAACC,GAAR,CACI,oCADJ;AAGAD,MAAAA,OAAO,CAACC,GAAR,CACI,wEADJ;AAGAC,MAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACH;;AAEDX,IAAAA,MAAM,GAAGA,MAAM,CAACY,MAAP,CAAeC,WAAD,IAAiB,CAACA,WAAW,CAACC,KAAZ,CAAkB,OAAlB,CAAhC,CAAT;AACAd,IAAAA,MAAM,GAAGA,MAAM,CAACe,GAAP,CAAYF,WAAD,eAAqBA,WAArB,CAAX,CAAT,CAxB2B,CA0B3B;AACA;AACA;;AAEA,QAAI;AACAG,sBAAOC,IAAP,CAAY,UAAZ;;AACA,YAAMf,iBAAGgB,SAAH,CAAa,UAAb,CAAN;AACH,KAHD,CAGE,OAAOpB,GAAP,EAAY;AACV,YAAMA,GAAN;AACH;;AAED,QAAI;AACA,YAAMI,iBAAGiB,IAAH,CAAQvB,OAAO,CAACwB,eAAhB,EAAiC,UAAjC,CAAN;AACH,KAFD,CAEE,OAAOtB,GAAP,EAAY;AACVU,MAAAA,OAAO,CAACa,KAAR,CAAcvB,GAAd;AACH;;AAED,UAAMwB,MAAM,GAAG,IAAIC,qBAAJ,CAAW;AACtBC,MAAAA,MAAM,EAAEzB,MAAM,CAAC0B;AADO,KAAX,CAAf;AAGA,UAAM;AAAEC,MAAAA;AAAF,QAAsBH,qBAA5B;AACA,UAAMI,OAAO,GAAG,IAAID,eAAJ,EAAhB;AACAC,IAAAA,OAAO,CAACC,EAAR,CAAW,UAAX,EAAwBC,QAAD,IAAcrB,OAAO,CAACC,GAAR,CAAYoB,QAAZ,CAArC;;AACA,QAAI;AACA,YAAMP,MAAM,CAACL,IAAP,CACF,UADE,iBAEMlB,MAAM,CAAC+B,QAFb,cAEyB/B,MAAM,CAACgC,QAFhC,GAGF;AACIC,QAAAA,YAAY,EAAE;AACVC,UAAAA,GAAG,EAAE;AADK,SADlB;AAIIN,QAAAA,OAAO,EAAEA,OAJb;AAKIO,QAAAA,GAAG,EAAE;AALT,OAHE,CAAN;AAWA1B,MAAAA,OAAO,CAACC,GAAR,CACI,iBADJ,iBAEYV,MAAM,CAAC+B,QAFnB,cAE+B/B,MAAM,CAACgC,QAFtC;AAIH,KAhBD,CAgBE,OAAOjC,GAAP,EAAY;AACV,YAAMA,GAAN;AACH;AACJ;AACJ,CAlFD","sourcesContent":["import s3sync from 's3-sync-client';\r\nimport path from 'path';\r\nimport prompt from 'prompt';\r\nimport fs from 'fs-extra';\r\nimport * as _ from 'lodash';\r\nimport rimraf from 'rimraf';\r\n\r\n(function () {\r\n    module.exports = {\r\n        execute: execute,\r\n    };\r\n\r\n    async function execute(context) {\r\n        try {\r\n            await deploy(context);\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    async function deploy(context) {\r\n        let config;\r\n        let ignore = context.ignoredFiles;\r\n\r\n        try {\r\n            config = fs.readFileSync(context.defaultConfig, 'utf8');\r\n            config = JSON.parse(config);\r\n        } catch (e) {\r\n            console.log(\r\n                'Cannot parse cordova-hcp.json. Did you run cordova-hcp init?'\r\n            );\r\n            process.exit(0);\r\n        }\r\n        if (!config) {\r\n            console.log(\r\n                'You need to run \"cordova-hcp init\"'\r\n            );\r\n            console.log(\r\n                'Init command needs to be invoked in the root of the project directory.'\r\n            );\r\n            process.exit(0);\r\n        }\r\n\r\n        ignore = ignore.filter((ignoredFile) => !ignoredFile.match(/^chcp/));\r\n        ignore = ignore.map((ignoredFile) => `!${ignoredFile}`);\r\n\r\n        // console.log('Credentials: ', credentials);\r\n        // console.log('Config: ', config);\r\n        // console.log('Ignore: ', ignore);\r\n\r\n        try {\r\n            rimraf.sync('./s3sync');\r\n            await fs.ensureDir('./s3sync');\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n\r\n        try {\r\n            await fs.copy(context.sourceDirectory, './s3sync');\r\n        } catch (err) {\r\n            console.error(err);\r\n        }\r\n\r\n        const client = new s3sync({\r\n            region: config.s3region,\r\n        });\r\n        const { TransferMonitor } = s3sync;\r\n        const monitor = new TransferMonitor();\r\n        monitor.on('progress', (progress) => console.log(progress));\r\n        try {\r\n            await client.sync(\r\n                './s3sync',\r\n                `s3://${config.s3bucket}/${config.s3prefix}`,\r\n                {\r\n                    commandInput: {\r\n                        ACL: 'public-read',\r\n                    },\r\n                    monitor: monitor,\r\n                    del: true,\r\n                }\r\n            );\r\n            console.log(\r\n                'Deploy complete',\r\n                `s3://${config.s3bucket}/${config.s3prefix}`\r\n            );\r\n        } catch (err) {\r\n            throw err;\r\n        }\r\n    }\r\n})();\r\n"],"file":"deploy.js"}