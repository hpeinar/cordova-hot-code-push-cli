{"version":3,"sources":["../src/server.js"],"names":["console","log","build","envFile","path","join","process","cwd","buildDirectory","app","assetPort","env","PORT","disablePublicTunnel","DISABLE_PUBLIC_TUNNEL","io","chcpContext","sourceDirectory","ignoredFiles","opts","content_url","debugOpts","updateLocalEnv","localEnv","config_url","json","JSON","stringify","fs","writeFileSync","execute","context","argv","localdev","url","publicTunnel","err","localUrl","assetServer","local_url","config","fileChangeFilter","file","fileIsAllowed","relativeFilePath","relative","i","len","length","hidefile","isHiddenSync","handleFileChange","_","debounce","killCaches","serveStaticAssets","serveSocketIO","watchForFileChange","error","watch","watchTree","filter","f","curr","prev","then","release","emit","httpServer","require","listen","on","socket","use","enable","express","static","maxAge","ass","disable","req","res","next","headers","port","options","ngrok","connect"],"mappings":"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","sourcesContent":["import path from 'path';\nimport _ from 'lodash';\nimport fs from 'fs';\nimport compression from 'compression';\nimport watch from 'watch';\nimport express from 'express';\nimport minimatch from 'minimatch';\nimport hidefile from 'hidefile';\nimport { createServer } from 'http';\nimport { Server } from 'socket.io';\nimport ngrok from 'ngrok';\n\nimport { execute as build } from './build.js';\nconsole.log('Build', build);\nconst envFile = path.join(process.cwd(), '.chcpenv');\n\nconst buildDirectory = path.join(process.cwd(), '.chcpbuild');\nconst app = express();\nconst assetPort = process.env.PORT || 80;\nconst disablePublicTunnel = process.env.DISABLE_PUBLIC_TUNNEL || false;\n\nlet io = null;\nlet chcpContext = null;\nlet sourceDirectory = './www';\nlet ignoredFiles = null;\nlet opts = {\n    content_url: null,\n};\nlet debugOpts = {};\n\nfunction updateLocalEnv(localEnv) {\n    localEnv.config_url = localEnv.content_url + '/chcp.json';\n\n    var json = JSON.stringify(localEnv, null, 2);\n    fs.writeFileSync(envFile, json);\n\n    return localEnv;\n}\n\nexport async function execute(context) {\n    chcpContext = context;\n    ignoredFiles = context.ignoredFiles;\n    chcpContext.argv.localdev = true;\n    sourceDirectory = chcpContext.sourceDirectory;\n\n    if (disablePublicTunnel) return;\n\n    try {\n        let url = await publicTunnel(assetPort);\n        console.log('Server running at ', url);\n\n        opts.content_url = url;\n    } catch (err) {\n        console.log(err);\n    }\n\n    let localUrl = null;\n    try {\n        localUrl = await assetServer(debugOpts);\n        console.log('Local URL', localUrl);\n    } catch (err) {\n        console.log(err);\n    }\n\n    opts.local_url = localUrl;\n\n    let config = {};\n    try {\n        config = await build(chcpContext);\n    } catch (err) {\n        throw err;\n    }\n\n    if (disablePublicTunnel) {\n        updateLocalEnv({ content_url: config.content_url });\n    }\n\n    console.log('cordova-hcp local server available at: ' + opts.local_url);\n    console.log(\n        'cordova-hcp public server available at: ' + config.content_url\n    );\n}\n\nfunction fileChangeFilter(file) {\n    // Ignore changes in files from the ignore list\n    var fileIsAllowed = true;\n    var relativeFilePath = path.relative(sourceDirectory, file);\n    for (var i = 0, len = ignoredFiles.length; i < len; i++) {\n        if (\n            hidefile.isHiddenSync(file) ||\n            minimatch(relativeFilePath, ignoredFiles[i])\n        ) {\n            fileIsAllowed = false;\n            break;\n        }\n    }\n\n    return fileIsAllowed;\n}\n\nfunction assetServer(opts) {\n    let localUrl = 'http://localhost:' + assetPort;\n\n    // If a lot of files changes at the same time, we only want to trigger the change event once.\n    handleFileChange = _.debounce(handleFileChange, 500);\n\n    try {\n        killCaches(app);\n        serveStaticAssets(app, opts);\n        serveSocketIO(app);\n        watchForFileChange();\n        return localUrl;\n    } catch (err) {\n        console.error('assetServer error: ', err);\n        throw err;\n    }\n}\n\nfunction watchForFileChange() {\n    // Monitor for file changes\n    console.log('Checking: ', sourceDirectory);\n    watch.watchTree(\n        sourceDirectory,\n        { filter: fileChangeFilter },\n        function (f, curr, prev) {\n            if (typeof f == 'object' && prev === null && curr === null) {\n                // Finished walking the tree\n                // console.log('Finished');\n            } else {\n                handleFileChange(f);\n            }\n        }\n    );\n}\n\nfunction handleFileChange(file) {\n    console.log('File changed: ', file);\n    build(chcpContext).then(function (config) {\n        console.log('Should trigger reload for build: ' + config.release);\n        io.emit('release', { config: config });\n    });\n}\n\nfunction serveSocketIO(app) {\n    // Let's start the server\n\n    const httpServer = createServer();\n    io = require('socket.io')(\n        app.listen(assetPort, () => {\n            console.log(\n                `Example app listening at http://localhost:${assetPort}`\n            );\n        })\n    );\n\n    // Open up socket for file change notifications\n    //io.set('transports', ['polling']);\n    io.on('connection', function (socket) {\n        console.log('a user connected');\n        socket.on('disconnect', function () {\n            console.log('user disconnected');\n        });\n    });\n}\n\nfunction serveStaticAssets(app, opts) {\n    // Static assets\n    app.use(compression());\n    app.enable('view cache');\n    app.use('/', express.static(sourceDirectory, { maxAge: 0 }));\n    console.log('Serving static', sourceDirectory);\n}\n\nfunction killCaches(ass) {\n    // Disable caches\n    app.disable('etag');\n    app.use(function (req, res, next) {\n        req.headers['if-none-match'] = 'no-match-for-this';\n        next();\n    });\n}\n\nasync function publicTunnel(port, options) {\n    console.log('Tunnelling via port ' + port);\n\n    try {\n        const url = await ngrok.connect();\n        updateLocalEnv({ content_url: url });\n        return url;\n    } catch (err) {\n        console.log('Could not create ngrok tunnel: ', err);\n        throw err;\n    }\n}\n"],"file":"server.js"}